// Generated by CoffeeScript 1.7.1
var Application, EntityName, PGConnect, TYPE, addApplication, attr, attr_list, attr_maps, expandValueUsingMap, getAllForEmail, getForId, globals, insertQuery, key, map, value;

globals = require('../globals');

PGConnect = globals.PGConnect;

EntityName = '"passport"."PassportApplication"';

TYPE = 'Citizen';

Application = (function() {
  function Application(source, data) {
    var req, result;
    switch (source) {
      case 'db':
        result = data;
        this.email = result.rows[0].email;
        break;
      case 'req':
        req = data;
        this.email = req.param('email');
    }
  }

  return Application;

})();

insertQuery = function(client, done, callback) {
  return client.query({
    name: "citizen_insert",
    text: ("INSERT INTO " + EntityName + " VALUES ( ") + '$1::varchar , ' + " ) ",
    values: [this.email]
  }, function(err, result) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    if (typeof done === "function") {
      done();
    }
    return typeof callback === "function" ? callback() : void 0;
  });
};

({
  insertIntoDatabase: function(client, callback) {
    if (typeof client === "function") {
      callback = client;
      client = void 0;
      if (client != null) {
        return insertQuery(client, null, callback);
      } else {
        return PGConnect(function(err, client, done) {
          if (err) {
            if (typeof done === "function") {
              done(client);
            }
            if (typeof callback === "function") {
              callback(err);
            }
            return;
          }
          return insertQuery(client, done, callback);
        });
      }
    }
  }
});

addApplication = function(client, callback) {};

attr_maps = {
  PassportType: {
    'n': 'Normal',
    'd': 'Diplomatic'
  },
  ApplyingFor: {
    'f': 'Fresh Passport',
    'r': 'Re-issue of Passport'
  },
  ApplicationType: {
    'n': 'Normal',
    't': 'Tatkaal'
  },
  PassportBookletType: {
    'a': '36 Pages',
    'b': '60 Pages'
  },
  ValidityRequired: {
    'a': '10 years',
    'b': 'Up to age 18',
    'n': 'Not Applicable'
  }
};

attr_list = {};

for (attr in attr_maps) {
  map = attr_maps[attr];
  attr_list[attr] = [];
  for (key in map) {
    value = map[key];
    attr_list[attr].push({
      key: key,
      value: value
    });
  }
}

expandValueUsingMap = function(hash) {
  for (attr in attr_maps) {
    map = attr_maps[attr];
    hash[attr] = map[hash[attr]];
  }
  return hash;
};

getAllForEmail = function(CitizenEmail, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "get_citizen_for_email",
      text: "SELECT * FROM " + EntityName + " WHERE \"CitizenEmail\" = $1::varchar",
      values: [CitizenEmail]
    }, function(err, result) {
      var row;
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      if (result.rows) {
        return typeof callback === "function" ? callback(null, (function() {
          var _i, _len, _ref, _results;
          _ref = result.rows;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            row = _ref[_i];
            _results.push(new Application('db', row));
          }
          return _results;
        })()) : void 0;
      } else {
        return typeof callback === "function" ? callback(null, null) : void 0;
      }
    });
  });
};

getForId = function(Id, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "get_citizen_for_email",
      text: "SELECT * FROM " + EntityName + " WHERE \"Id\" = $1::varchar",
      values: [Id]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      if (result.rows[0]) {
        return typeof callback === "function" ? callback(null, new Application('db', result.rows[0])) : void 0;
      } else {
        return typeof callback === "function" ? callback(null, null) : void 0;
      }
    });
  });
};

module.exports = {
  Application: Application,
  type: TYPE,
  attr_maps: attr_maps,
  attr_list: attr_list,
  expandValueUsingMap: expandValueUsingMap,
  addApplication: addApplication,
  getAllForEmail: getAllForEmail,
  getForId: getForId
};
