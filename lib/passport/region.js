// Generated by CoffeeScript 1.7.1
var EntityName, PGConnect, debug, getPGOForRegionWithId, getRegions, globals, pgo, rollback, setPGOForRegionId, unsetPGOForRegionId;

globals = require('../globals');

debug = globals.debug;

PGConnect = globals.PGConnect;

pgo = require('../user/pgo');

EntityName = '"passport"."Region"';

getRegions = function(callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "region_get_all",
      text: "SELECT * FROM " + EntityName + " ORDER BY \"Name\" ASC ",
      values: []
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows) : void 0;
    });
  });
};

getPGOForRegionWithId = function(id, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "region_get_for_id",
      text: "SELECT \"GrantingOfficerEmail\" FROM " + EntityName + " WHERE \"Id\" = $1::int ",
      values: [id]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows[0] ? result.rows[0].GrantingOfficerEmail : null) : void 0;
    });
  });
};

rollback = function(client, done) {
  return client.query('ROLLBACK', function(err) {
    return typeof done === "function" ? done(err) : void 0;
  });
};

setPGOForRegionId = function(Id, GrantingOfficerEmail, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query('BEGIN', function(err) {
      if (err) {
        rollback(client, done);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return pgo.addPassportGrantingOfficer(GrantingOfficerEmail, "Passport Granting Officer of Region " + Id, client, function(err) {
        if (err) {
          rollback(client, done);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        return client.query({
          name: "region_set_pgo",
          text: "UPDATE " + EntityName + " SET \"GrantingOfficerEmail\" = $1::varchar WHERE \"Id\" = $2::int ",
          values: [GrantingOfficerEmail, Id]
        }, function(err, result) {
          if (err) {
            rollback(client, done);
            if (typeof callback === "function") {
              callback(err);
            }
            return;
          }
          return client.query('COMMIT', function(err) {
            if (err) {
              if (typeof done === "function") {
                done(client);
              }
              if (typeof callback === "function") {
                callback(err);
              }
            }
            if (typeof done === "function") {
              done();
            }
            return typeof callback === "function" ? callback(null, result.rows) : void 0;
          });
        });
      });
    });
  });
};

unsetPGOForRegionId = function(Id, callback) {
  return getPGOForRegionWithId(Id, function(err, GrantingOfficerEmail) {
    if (err) {
      return typeof callback === "function" ? callback(err) : void 0;
    }
    return PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return client.query('BEGIN', function(err) {
        if (err) {
          rollback(client, done);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        debug("Unauthorizing PGO for region id " + Id);
        return client.query({
          name: "region_unset_pgo",
          text: "UPDATE " + EntityName + " SET \"GrantingOfficerEmail\" = null WHERE \"Id\" = $1::int ",
          values: [Id]
        }, function(err, result) {
          if (err) {
            rollback(client, done);
            if (typeof callback === "function") {
              callback(err);
            }
            return;
          }
          return pgo.removePassportGrantingOfficer(GrantingOfficerEmail, client, function(err) {
            if (err) {
              rollback(client, done);
              if (typeof callback === "function") {
                callback(err);
              }
              return;
            }
            client.query('COMMIT', function(err) {
              if (err) {
                if (typeof done === "function") {
                  done(client);
                }
                if (typeof callback === "function") {
                  callback(err);
                }
              }
              return typeof done === "function" ? done() : void 0;
            });
            return typeof callback === "function" ? callback(null, result.rows) : void 0;
          });
        });
      });
    });
  });
};

module.exports = {
  getRegions: getRegions,
  setPGOForRegionId: setPGOForRegionId,
  unsetPGOForRegionId: unsetPGOForRegionId
};
