// Generated by CoffeeScript 1.7.1
var config, crypto, decrypt, encrypt, genKey, globals;

crypto = require('crypto');

globals = require('./globals');

config = globals.config;

encrypt = function(plaintext) {
  var cipher, crypted;
  cipher = crypto.createCipher('aes-256-cbc', config.credential_secret);
  crypted = cipher.update(plaintext, 'utf8', 'base64');
  crypted += cipher.final('base64');
  return crypted;
};

decrypt = function(crypted) {
  var dec, decipher;
  decipher = crypto.createDecipher('aes-256-cbc', config.credential_secret);
  dec = decipher.update(crypted, 'base64', 'utf8');
  dec += decipher.final('utf8');
  return dec;
};

genKey = function(password, salt, callback) {
  var ph, phe;
  ph = crypto.createHash('sha512').update(password).digest('base64');
  phe = encrypt(ph);
  return crypto.pbkdf2(phe, salt, 10000, 32, function(err, key) {
    if (err) {
      return typeof callback === "function" ? callback(err) : void 0;
    }
    return typeof callback === "function" ? callback(null, new Buffer(key).toString('hex')) : void 0;
  });
};

module.exports = {
  encrypt: encrypt,
  decrypt: decrypt,
  genKey: genKey
};
