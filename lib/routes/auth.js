// Generated by CoffeeScript 1.7.1
var PGConnect, admin, async, auth, citizen, express, globals, pgo, reset, rollback, router, unverifiedUser, user, va;

async = require('async');

express = require('express');

router = express.Router();

auth = require('../user/authentication');

reset = require('../user/reset');

user = require('../user/user');

unverifiedUser = require('../user/unverifiedUser');

citizen = require('../user/citizen');

admin = require('../user/admin');

pgo = require('../user/pgo');

va = require('../user/va');

globals = require('../globals');

PGConnect = globals.PGConnect;

router.post('/signin', function(req, res, next) {
  var email;
  email = req.param('email');
  auth.verifyCredentials(email, req.param('password'), function(err, validity) {
    if (err) {
      return next(err);
    }
    if (validity !== true) {
      res.locals.error = new Error('Invalid Credentials');
      res.locals.error.details = "It looks like this was the result of either: <br /><ul><li>Non-existent user</li><li>a mistyped password</li></ul>";
      res.locals.autoFillUsingLocals = true;
      res.locals.email = email;
      return next();
    } else {
      return async.map([admin, pgo, va, citizen], function(user, callback) {
        return user.getForEmail(email, callback);
      }, function(err, users) {
        var filteredUser, _i, _len;
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          filteredUser = users[_i];
          if (filteredUser != null) {
            req.session.user = filteredUser;
          }
        }
        if (!req.session.user) {
          req.session.user = new user.User(email);
        }
        if (req.param('redirect')) {
          return res.redirect(req.param('redirect'));
        } else {
          return res.redirect('/dashboard/');
        }
      });
    }
  });
});

router.get('/login', function(req, res, next) {
  return res.redirect(req.url.replace(/^\/login/, "/signin"));
});

router.get('/signin', function(req, res, next) {
  if (req.session.user) {
    return res.redirect('/dashboard/');
  }
  next();
});

router.get('/logout', function(req, res, next) {
  return res.redirect(req.url.replace(/^\/logout/, "/signout"));
});

router.all('/signout', function(req, res, next) {
  if (!req.session.user) {
    return res.redirect('/');
  }
  req.session.user = null;
  res.redirect('/auth/signin');
});

router.get('/register', function(req, res, next) {
  return res.redirect(req.url.replace(/^\/login/, "/register"));
});

router.post('/signup', function(req, res, next) {
  var email, name;
  email = req.param('email');
  name = req.param('name');
  if (!/(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/.test(email)) {
    res.locals.error = new Error('Invalid email.');
    res.locals.autoFillUsingLocals = true;
    res.locals.name = name;
    res.locals.email = email;
    next();
    return;
  }
  return user.getForEmail(email, function(err, existingUser) {
    if (err) {
      res.locals.error = err;
      res.locals.autoFillUsingLocals = true;
      res.locals.name = name;
      res.locals.email = email;
      next();
      return;
    }
    if (existingUser) {
      res.locals.error = new Error("An account with email " + email + " already exist. Try resetting password.");
      next();
      return;
    }
    unverifiedUser.addUnverifiedUser(email, name, function(err) {
      if (err) {
        res.locals.error = err;
        res.locals.autoFillUsingLocals = true;
        res.locals.name = name;
        res.locals.email = email;
        next();
        return;
      }
      res.locals.success = {
        message: 'You have been sent a verification email. Please check your inbox/spam and click verify to activate your account.'
      };
      return next();
    });
  });
});

rollback = function(client, done) {
  return client.query('ROLLBACK', function(err) {
    return typeof done === "function" ? done(err) : void 0;
  });
};

router.all('/verification', function(req, res, next) {
  res.locals.error = new Error('Invalid Link');
  res.locals.hideForm = true;
  next();
});

router.all('/verification/:verificationKey', function(req, res, next) {
  var verificationKey;
  verificationKey = req.param('verificationKey');
  req.url = '/verification';
  return unverifiedUser.getEmailForVerificationKey(verificationKey, function(err, email) {
    if (err) {
      next(err);
      return;
    }
    if (!email) {
      res.locals.error = new Error('Invalid Verification Link');
      res.locals.hideForm = true;
      next();
      return;
    }
    res.locals.email = email;
    res.locals.verificationKey = verificationKey;
    res.locals.encodedVerificationKey = encodeURIComponent(verificationKey);
    next();
  });
});

router.post('/verification', function(req, res, next) {
  var confirmPassword, password;
  if (res.locals.error) {
    next();
    return;
  }
  password = req.param('password');
  confirmPassword = req.param('confirmPassword');
  if (password !== confirmPassword) {
    res.locals.error = new Error('Password and Confirmation Password didn\'t match.');
    next();
    return;
  }
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query('BEGIN', function(err) {
      if (err) {
        rollback(client, done);
        res.locals.error = err;
        next();
        return;
      }
      return user.addUser(res.locals.email, password, client, function(err) {
        if (err) {
          rollback(client, done);
          res.locals.error = err;
          next();
          return;
        }
        return unverifiedUser.removeUnverifiedUser(res.locals.verificationKey, client, function(err) {
          if (err) {
            rollback(client, done);
            res.locals.error = err;
            next();
            return;
          }
          return client.query('COMMIT', function(err) {
            if (err) {
              if (typeof done === "function") {
                done(client);
              }
              res.locals.error = err;
              next();
              return;
            }
            if (typeof done === "function") {
              done();
            }
            req.session.user = new user.User(res.locals.email);
            if (req.param('redirect')) {
              return res.redirect(req.param('redirect'));
            } else {
              return res.redirect('/dashboard/');
            }
          });
        });
      });
    });
  });
});

router.post('/forgot', function(req, res, next) {
  var email;
  if (res.locals.error) {
    next();
    return;
  }
  email = req.param('email');
  return user.resetPasswordForUserWithEmail(email, function(err) {
    if (err) {
      res.locals.error = err;
      next();
      return;
    }
    res.locals.success = {
      message: 'A passort reset link has been sent to your email.'
    };
    next();
  });
});

router.all('/reset', function(req, res, next) {
  res.locals.error = new Error('Invalid Link');
  res.locals.hideForm = true;
  next();
});

router.all('/reset/:resetKey', function(req, res, next) {
  var resetKey;
  resetKey = req.param('resetKey');
  req.url = '/reset';
  reset.getEmailForResetKey(resetKey, function(err, email) {
    if (err) {
      next(err);
      return;
    }
    if (!email) {
      res.locals.error = new Error('Invalid Reset Link');
      res.locals.hideForm = true;
      next();
      return;
    }
    res.locals.email = email;
    res.locals.resetKey = resetKey;
    res.locals.encodedResetKey = encodeURIComponent(resetKey);
    next();
  });
});

router.post('/reset', function(req, res, next) {
  var confirmPassword, password;
  if (res.locals.error) {
    next();
    return;
  }
  password = req.param('password');
  confirmPassword = req.param('confirmPassword');
  if (password !== confirmPassword) {
    res.locals.error = new Error('Password and Confirmation Password didn\'t match.');
    next();
    return;
  }
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query('BEGIN', function(err) {
      if (err) {
        rollback(client, done);
        res.locals.error = err;
        next();
        return;
      }
      return user.setPasswordForUserWithEmail(res.locals.email, password, client, function(err) {
        if (err) {
          rollback(client, done);
          res.locals.error = err;
          next();
          return;
        }
        return reset.removeResetKey(res.locals.resetKey, client, function(err) {
          if (err) {
            rollback(client, done);
            res.locals.error = err;
            next();
            return;
          }
          return client.query('COMMIT', function(err) {
            if (err) {
              if (typeof done === "function") {
                done(client);
              }
              res.locals.error = err;
              next();
              return;
            }
            if (typeof done === "function") {
              done();
            }
            if (req.param('redirect')) {
              return res.redirect(req.param('redirect'));
            } else {
              return res.redirect('/auth/signin/');
            }
          });
        });
      });
    });
  });
});

module.exports = router;
