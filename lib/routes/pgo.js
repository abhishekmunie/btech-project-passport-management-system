// Generated by CoffeeScript 1.7.1
var async, express, globals, pgo, region, router, va;

async = require('async');

express = require('express');

router = express.Router();

pgo = require('../user/pgo');

va = require('../user/va');

globals = require('../globals');

region = require('../passport/region');

router.post('/va-management', function(req, res, next) {
  var Id, VAEmail, action;
  action = req.param('action');
  switch (action) {
    case 'setValidationAuthorityEmail':
      Id = req.param('Id');
      VAEmail = req.param('email');
      if (!/(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/.test(VAEmail)) {
        res.locals.error = new Error('Invalid email.');
        next();
        return;
      }
      region.getRegionIdForPGOWithEmail(req.session.user.email, function(err, Id) {
        if (err) {
          res.locals.error = err;
          next();
          return;
        }
        if (!Id) {
          res.locals.error = new Error('Region Id not found');
          next();
          return;
        }
        return va.addVAForRegionId(VAEmail, Id, function(err, row) {
          if (err) {
            res.locals.error = err;
            next();
            return;
          }
          res.locals.success = {
            message: "validation Authority's Email was successfully Authorized."
          };
          next();
        });
      });
      break;
    case 'unsetValidationAuthorityEmail':
      VAEmail = req.param('email');
      va.removeVAWthEmail(VAEmail, function(err, row) {
        if (err) {
          res.locals.error = err;
          next();
          return;
        }
        console.log(row);
        res.locals.success = {
          message: "validation Authority's Email was successfully Deauthorized."
        };
        next();
      });
      break;
    default:
      res.locals.error = new Error('Invalid request.');
      next();
  }
});

router.all('/va-management', function(req, res, next) {
  region.getValidationAuthorititesUnderPGOWithEmail(req.session.user.email, function(err, vas) {
    if (err) {
      return next(err);
    }
    res.locals.validationAuthorities = vas;
    next();
  });
});

module.exports = router;
