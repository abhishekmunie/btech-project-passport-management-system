// Generated by CoffeeScript 1.7.1
var config, debug, fs, globals, hogan, nodemailer, passwordResetTemplate, passwordResetTemplateFile, path, sendMail, smtpTransport, verificationMailTemplate, verificationMailTemplateFile;

fs = require('fs');

path = require('path');

nodemailer = require('nodemailer');

hogan = require('hogan.js');

globals = require('./globals');

config = globals.config;

debug = globals.debug;

smtpTransport = nodemailer.createTransport("SMTP", {
  service: "Gmail",
  auth: {
    user: config.email.user,
    pass: config.email.pass
  }
});

sendMail = function(to, subject, body, callback) {
  if (config.env === 'production') {
    return smtpTransport.sendMail({
      from: "" + config.email.name + " <" + config.email.user + ">",
      to: to,
      subject: subject,
      html: body
    }, function(error, response) {
      if (error) {
        return typeof callback === "function" ? callback(error) : void 0;
      }
      if (typeof callback === "function") {
        callback(null, response);
      }
    });
  } else {
    return process.nextTick(callback);
  }
};

verificationMailTemplate = passwordResetTemplate = void 0;

verificationMailTemplateFile = path.join(config.email.template_dir, 'verification-email.html');

passwordResetTemplateFile = path.join(config.email.template_dir, 'reset-email.html');

fs.readFile(verificationMailTemplateFile, function(err, data) {
  if (err) {
    return console.error(err);
  }
  return verificationMailTemplate = hogan.compile(data.toString());
});

fs.readFile(passwordResetTemplateFile, function(err, data) {
  if (err) {
    return console.error(err);
  }
  return passwordResetTemplate = hogan.compile(data.toString());
});

module.exports = {
  sendVerificationEMail: function(to, verificationKey, callback) {
    debug("Sending Verification email to " + to + " with key: " + verificationKey);
    return sendMail(to, 'Email Verification', verificationMailTemplate.render({
      key: encodeURIComponent(verificationKey)
    }), callback);
  },
  sendPasswordResetEMail: function(to, resetKey, callback) {
    debug("Sending Reset email to " + to + " with key: " + resetKey);
    return sendMail(to, 'Password Reset', passwordResetTemplate.render({
      key: encodeURIComponent(resetKey)
    }), callback);
  }
};
