// Generated by CoffeeScript 1.7.1
var cache, config, ejs, fs, globals, hogan, path, renderEJS, renderHogan, resolve;

fs = require('fs');

path = require('path');

resolve = require('resolve-path');

hogan = require('hogan.js');

ejs = require('ejs');

globals = require('./globals');

config = globals.config;

cache = {};

renderEJS = function(template, req, res) {
  return template({
    url: req.url,
    encodedUrl: encodeURIComponent(req.url),
    originalUrl: req.originalUrl,
    encodedOriginalUrl: encodeURIComponent(req.originalUrl),
    query: req.query,
    param: req.params,
    session: req.session,
    locals: res.locals
  });
};

renderHogan = function(template, req, res) {
  return template.render({
    url: req.url,
    encodedUrl: encodeURIComponent(req.url),
    originalUrl: req.originalUrl,
    encodedOriginalUrl: encodeURIComponent(req.originalUrl),
    url: req.url,
    originalUrl: req.originalUrl,
    query: req.query,
    param: req.params,
    session: req.session,
    locals: res.locals
  });
};

module.exports.sendHogan = function(url, req, res, callback) {
  var filename, query, urlPath, _ref;
  if (arguments.length === 3) {
    callback = arguments[2];
    res = arguments[1];
    req = arguments[0];
    url = req.url;
  }
  _ref = url.split('?'), urlPath = _ref[0], query = _ref[1];
  if (cache[urlPath] != null) {
    res.send(renderHogan(cache[urlPath], req, res));
    process.nextTick(function() {
      if (typeof callback === "function") {
        return callback;
      }
    });
  } else {
    filename = resolve(path.join(config.views_dir, urlPath));
    fs.readFile(filename, function(err, data) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      if (config.env === 'production') {
        res.send(renderHogan(cache[urlPath] = hogan.compile(data.toString()), req, res));
      } else {
        res.send(renderHogan(hogan.compile(data.toString()), req, res));
      }
      return typeof callback === "function" ? callback() : void 0;
    });
  }
};

module.exports.sendEJS = function(url, req, res, callback) {
  var filename, query, urlPath, _ref;
  if (arguments.length === 3) {
    callback = arguments[2];
    res = arguments[1];
    req = arguments[0];
    url = req.url;
  }
  _ref = url.split('?'), urlPath = _ref[0], query = _ref[1];
  if (cache[urlPath] != null) {
    res.send(renderEJS(cache[urlPath], req, res));
    process.nextTick(function() {
      if (typeof callback === "function") {
        return callback;
      }
    });
  } else {
    filename = resolve(path.join(config.views_dir, urlPath));
    fs.readFile(filename, function(err, data) {
      var ejsTemplate, hoganTemplate;
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      hoganTemplate = hogan.compile(data.toString());
      if (config.env === 'production') {
        cache[urlPath] = hoganTemplate;
      }
      ejsTemplate = ejs.compile(renderHogan(hoganTemplate, req, res), {
        cache: config.env === 'production',
        filename: filename,
        compileDebug: config.env !== 'production'
      });
      res.send(renderEJS(ejsTemplate, req, res));
      return typeof callback === "function" ? callback() : void 0;
    });
  }
};
