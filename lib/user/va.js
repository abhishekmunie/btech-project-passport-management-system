// Generated by CoffeeScript 1.7.1
var EntityName, PGConnect, TYPE, ValidationAuthority, filter, globals, isValidationAuthority, user,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

user = require('./user');

globals = require('../globals');

PGConnect = globals.PGConnect;

EntityName = '"passport"."ValidationAuthority"';

TYPE = 'ValidationAuthority';

ValidationAuthority = (function(_super) {
  __extends(ValidationAuthority, _super);

  function ValidationAuthority(email, name) {
    this.email = email;
    this.name = name;
    this.type = TYPE;
  }

  return ValidationAuthority;

})(user.User);

isValidationAuthority = function(email, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "is_validation_authority",
      text: "SELECT count(*) AS exists FROM " + EntityName + " WHERE email = $1::varchar",
      values: [email]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows[0].exists === '1') : void 0;
    });
  });
};

filter = function(req, res, next) {
  debug("Validation Authority Auth Filter: " + req.url);
  if (!req.session.user) {
    return res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
  }
  isValidationAuthority(req.session.user.email, function(err, vaValidity) {
    if (!vaValidity) {
      if (req.session.user) {
        if (req.session.user.type === TYPE) {
          req.session.user = null;
          return res.redirect("/auth/signin");
        } else {
          return res.redirect("/dashboard");
        }
      } else {
        req.url = "/auth/signin/va";
      }
    }
    return next();
  });
};

module.exports = {
  ValidationAuthority: ValidationAuthority,
  type: TYPE,
  filter: filter,
  isValidationAuthority: isValidationAuthority,
  getForEmail: function(email, callback) {
    return PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return client.query({
        name: "get_validation_authority_for_email",
        text: "SELECT * FROM " + EntityName + " WHERE email = $1::varchar",
        values: [email]
      }, function(err, result) {
        if (err) {
          if (typeof done === "function") {
            done(client);
          }
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        if (typeof done === "function") {
          done();
        }
        if (result.rows[0]) {
          return typeof callback === "function" ? callback(null, new ValidationAuthority(result.rows[0].email, result.rows[0].Name)) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, null) : void 0;
        }
      });
    });
  }
};
