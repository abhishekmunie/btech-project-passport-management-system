// Generated by CoffeeScript 1.7.1
var EntityName, PGConnect, TYPE, ValidationAuthority, addVAForRegionId, addValidationAuthority, application, citizen, crypto, debug, deleteQuery, deleteValidationAuthorityFromDatabase, filter, getApplicationsWithProfileForVAWithEmail, getForEmail, globals, insertQuery, insertValidationAuthorityIntoDatabase, isValidationAuthority, removeVAWthEmail, removeValidationAuthority, rollback, user,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

user = require('./user');

citizen = require('./citizen');

application = require('../passport/application');

globals = require('../globals');

debug = globals.debug;

PGConnect = globals.PGConnect;

EntityName = '"passport"."ValidationAuthority"';

TYPE = 'ValidationAuthority';

ValidationAuthority = (function(_super) {
  __extends(ValidationAuthority, _super);

  function ValidationAuthority(email, name) {
    this.email = email;
    this.name = name;
    this.type = TYPE;
  }

  return ValidationAuthority;

})(user.User);

isValidationAuthority = function(email, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "is_validation_authority",
      text: "SELECT count(*) AS exists FROM " + EntityName + " WHERE email = $1::varchar",
      values: [email]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows[0].exists === '1') : void 0;
    });
  });
};

getForEmail = function(email, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "get_validation_authority_for_email",
      text: "SELECT * FROM " + EntityName + " WHERE email = $1::varchar",
      values: [email]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      if (result.rows[0]) {
        return typeof callback === "function" ? callback(null, new ValidationAuthority(result.rows[0].email, result.rows[0].Name)) : void 0;
      } else {
        return typeof callback === "function" ? callback(null, null) : void 0;
      }
    });
  });
};

insertQuery = function(values, client, done, callback) {
  return client.query({
    name: "va_insert",
    text: "INSERT INTO " + EntityName + " VALUES ( $1::varchar , $2::varchar , $3::int ) ",
    values: values
  }, function(err, result) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    if (typeof done === "function") {
      done();
    }
    return typeof callback === "function" ? callback(null, result.rows) : void 0;
  });
};

insertValidationAuthorityIntoDatabase = function(email, Name, regionId, client, callback) {
  if (typeof client === "function") {
    callback = client;
    client = void 0;
  }
  if (client != null) {
    insertQuery([email, Name, regionId], client, null, callback);
  } else {
    PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      insertQuery([email, Name, regionId], client, done, callback);
    });
  }
};

addValidationAuthority = function(email, Name, regionId, client, callback) {
  var tempPassword;
  if (typeof client === "function") {
    callback = client;
    client = void 0;
  }
  debug("Adding VA with email: " + email);
  tempPassword = crypto.createHash('sha1').update(crypto.randomBytes(256)).digest('hex');
  user.addUser(email, tempPassword, client, function(err) {
    user.resetPasswordForUserWithEmail(email, client, function(err, res) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      console.log('ok');
      insertValidationAuthorityIntoDatabase(email, Name, regionId, client, callback);
    });
  });
};

rollback = function(client, done) {
  return client.query('ROLLBACK', function(err) {
    return typeof done === "function" ? done(err) : void 0;
  });
};

addVAForRegionId = function(email, regionId, callback) {
  PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    client.query('BEGIN', function(err) {
      if (err) {
        rollback(client, done);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      addValidationAuthority(email, "A Validation Authority of Region " + regionId, regionId, client, function(err) {
        if (err) {
          rollback(client, done);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        client.query('COMMIT', function(err) {
          if (err) {
            if (typeof done === "function") {
              done(client);
            }
            if (typeof callback === "function") {
              callback(err);
            }
            return;
          }
          if (typeof done === "function") {
            done();
          }
          if (typeof callback === "function") {
            callback();
          }
        });
      });
    });
  });
};

deleteQuery = function(email, client, done, callback) {
  return client.query({
    name: "va_delete",
    text: "DELETE FROM " + EntityName + " WHERE \"email\" = $1::varchar ",
    values: [email]
  }, function(err, result) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    if (typeof done === "function") {
      done();
    }
    return typeof callback === "function" ? callback(null, result.rows) : void 0;
  });
};

deleteValidationAuthorityFromDatabase = function(email, client, callback) {
  if (typeof client === "function") {
    callback = client;
    client = void 0;
  }
  if (client != null) {
    deleteQuery(email, client, null, callback);
  } else {
    PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      deleteQuery(email, client, done, callback);
    });
  }
};

removeValidationAuthority = function(email, client, callback) {
  if (typeof client === "function") {
    callback = client;
    client = void 0;
  }
  debug("Removing PGO with email: " + email);
  return deleteValidationAuthorityFromDatabase(email, client, function(err) {
    return user.removeUser(email, client, callback);
  });
};

removeVAWthEmail = function(email, callback) {
  PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    client.query('BEGIN', function(err) {
      if (err) {
        rollback(client, done);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      removeValidationAuthority(email, client, function(err) {
        if (err) {
          rollback(client, done);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        client.query('COMMIT', function(err) {
          if (err) {
            if (typeof done === "function") {
              done(client);
            }
            if (typeof callback === "function") {
              callback(err);
            }
            return;
          }
          if (typeof done === "function") {
            done();
          }
          if (typeof callback === "function") {
            callback();
          }
        });
      });
    });
  });
};

getApplicationsWithProfileForVAWithEmail = function(email, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "va_get_apps_profile_for_email",
      text: "SELECT * FROM " + EntityName + " va NATURAL JOIN " + application.EntityName + " a , " + citizen.EntityName + " c WHERE c.\"email\" = a.\"CitizenEmail\" AND va.\"email\" = $1::varchar ",
      values: [email]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows) : void 0;
    });
  });
};

filter = function(req, res, next) {
  debug("Validation Authority Auth Filter: " + req.url);
  if (!req.session.user) {
    return res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
  }
  isValidationAuthority(req.session.user.email, function(err, vaValidity) {
    if (!vaValidity) {
      if (req.session.user) {
        if (req.session.user.type === TYPE) {
          req.session.user = null;
          return res.redirect("/auth/signin");
        } else {
          return res.redirect("/dashboard");
        }
      } else {
        req.url = "/auth/signin/va";
      }
    }
    return next();
  });
};

module.exports = {
  ValidationAuthority: ValidationAuthority,
  type: TYPE,
  EntityName: EntityName,
  filter: filter,
  isValidationAuthority: isValidationAuthority,
  getForEmail: getForEmail,
  addVAForRegionId: addVAForRegionId,
  addValidationAuthority: addValidationAuthority,
  removeVAWthEmail: removeVAWthEmail,
  getApplicationsWithProfileForVAWithEmail: getApplicationsWithProfileForVAWithEmail
};
