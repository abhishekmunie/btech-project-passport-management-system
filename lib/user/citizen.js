// Generated by CoffeeScript 1.7.1
var Citizen, EntityName, PGConnect, TYPE, addCitizen, attr, attr_list, attr_maps, debug, expandValueUsingMap, filter, getForEmail, globals, isCitizen, key, map, user, value,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

user = require('./user');

globals = require('../globals');

debug = globals.debug;

PGConnect = globals.PGConnect;

EntityName = '"passport"."Citizen"';

TYPE = 'Citizen';

Citizen = (function(_super) {
  __extends(Citizen, _super);

  function Citizen(source, data) {
    var req, row;
    switch (source) {
      case 'db':
        row = data;
        Citizen.__super__.constructor.call(this, row.email);
        this.GivenName = row.GivenName;
        this.Surname = row.Surname;
        this.HasAliases = row.HasAliases;
        this.HaveChangedName = row.HaveChangedName;
        this.ContactNumber = row.ContactNumber;
        this.DateOfBirth = row.DateOfBirth;
        this.City = row.City;
        this.Country = row.Country;
        this.State = row.State;
        this.District = row.District;
        this.Gender = row.Gender;
        this.MaritalStatus = row.MaritalStatus;
        this.CitizenshipBy = row.CitizenshipBy;
        this.PAN = row.PAN;
        this.VoterID = row.VoterID;
        this.EmploymentType = row.EmploymentType;
        this.EducationalQualification = row.EducationalQualification;
        this.AadhaarNumber = row.AadhaarNumber;
        this.FatherGivenName = row.FatherGivenName;
        this.FatherSurname = row.FatherSurname;
        this.MotherGivenName = row.MotherGivenName;
        this.MotherSurname = row.MotherSurname;
        this.LegalGuardianGivenName = row.LegalGuardianGivenName;
        this.LegalGuardianSurname = row.LegalGuardianSurname;
        this.PresentAddressOutOfCountry = row.PresentAddressOutOfCountry;
        this.FirstReferenceNameandAddress = row.FirstReferenceNameandAddress;
        this.FirstReferenceMobileNumber = row.FirstReferenceMobileNumber;
        this.SecondReferenceNameandAddress = row.SecondReferenceNameandAddress;
        this.SecondReferenceMobileNumber = row.SecondReferenceMobileNumber;
        this.EmergencyNameAndAddress = row.EmergencyNameAndAddress;
        this.EmergencyMobileNumber = row.EmergencyMobileNumber;
        this.AppliedButNotIssued = row.AppliedButNotIssued;
        this.PreviousPassportNumber = row.PreviousPassportNumber;
        this.OtherDetails1 = row.OtherDetails1;
        this.OtherDetails2 = row.OtherDetails2;
        this.OtherDetails3 = row.OtherDetails3;
        this.OtherDetails4 = row.OtherDetails4;
        this.OtherDetails5 = row.OtherDetails5;
        this.OtherDetails6 = row.OtherDetails6;
        break;
      case 'req':
        req = data;
        Citizen.__super__.constructor.call(this, req.session.user.email);
        this.GivenName = req.param('GivenName');
        this.Surname = req.param('Surname');
        this.HasAliases = req.param('HasAliases');
        this.HaveChangedName = req.param('HaveChangedName');
        this.ContactNumber = req.param('ContactNumber');
        this.DateOfBirth = req.param('DateOfBirth');
        this.City = req.param('City');
        this.Country = req.param('Country');
        this.State = req.param('State');
        this.District = req.param('District');
        this.Gender = req.param('Gender');
        this.MaritalStatus = req.param('MaritalStatus');
        this.CitizenshipBy = req.param('CitizenshipBy');
        this.PAN = req.param('PAN');
        this.VoterID = req.param('VoterID');
        this.EmploymentType = req.param('EmploymentType');
        this.EducationalQualification = req.param('EducationalQualification');
        this.AadhaarNumber = req.param('AadhaarNumber');
        this.FatherGivenName = req.param('FatherGivenName');
        this.FatherSurname = req.param('FatherSurname');
        this.MotherGivenName = req.param('MotherGivenName');
        this.MotherSurname = req.param('MotherSurname');
        this.LegalGuardianGivenName = req.param('LegalGuardianGivenName');
        this.LegalGuardianSurname = req.param('LegalGuardianSurname');
        this.PresentAddressOutOfCountry = req.param('PresentAddressOutOfCountry');
        this.FirstReferenceNameandAddress = req.param('FirstReferenceNameandAddress');
        this.FirstReferenceMobileNumber = req.param('FirstReferenceMobileNumber');
        this.SecondReferenceNameandAddress = req.param('SecondReferenceNameandAddress');
        this.SecondReferenceMobileNumber = req.param('SecondReferenceMobileNumber');
        this.EmergencyNameAndAddress = req.param('EmergencyNameAndAddress');
        this.EmergencyMobileNumber = req.param('EmergencyMobileNumber');
        this.AppliedButNotIssued = req.param('AppliedButNotIssued');
        this.PreviousPassportNumber = req.param('PreviousPassportNumber');
        this.OtherDetails1 = req.param('OtherDetails1');
        this.OtherDetails2 = req.param('OtherDetails2');
        this.OtherDetails3 = req.param('OtherDetails3');
        this.OtherDetails4 = req.param('OtherDetails4');
        this.OtherDetails5 = req.param('OtherDetails5');
        this.OtherDetails6 = req.param('OtherDetails6');
    }
    this.name = this.GivenName + ' ' + this.Surname;
    this.type = TYPE;
  }

  Citizen.prototype.insertQuery = function(client, done, callback) {
    return client.query({
      name: "citizen_insert",
      text: ("INSERT INTO " + EntityName + " VALUES ( ") + '$1::varchar , ' + '$2::varchar , ' + '$3::varchar , ' + '$4::char , ' + '$5::char , ' + '$6::varchar , ' + '$7::date , ' + '$8::varchar , ' + '$9::varchar , ' + '$10::varchar , ' + '$11::varchar , ' + '$12::char , ' + '$13::char , ' + '$14::char , ' + '$15::varchar , ' + '$16::varchar , ' + '$17::varchar , ' + '$18::varchar , ' + '$19::varchar , ' + '$20::varchar , ' + '$21::varchar , ' + '$22::varchar , ' + '$23::varchar , ' + '$24::varchar , ' + '$25::varchar , ' + '$26::char , ' + '$27::varchar , ' + '$28::varchar , ' + '$29::varchar , ' + '$30::varchar , ' + '$31::varchar , ' + '$32::varchar , ' + '$33::char , ' + '$34::varchar , ' + '$35::char , ' + '$36::char , ' + '$37::char , ' + '$38::char , ' + '$39::char , ' + '$40::char ' + " ) ",
      values: [this.email, this.GivenName, this.Surname, this.HasAliases, this.HaveChangedName, this.ContactNumber, this.DateOfBirth, this.City, this.Country, this.State, this.District, this.Gender, this.MaritalStatus, this.CitizenshipBy, this.PAN, this.VoterID, this.EmploymentType, this.EducationalQualification, this.AadhaarNumber, this.FatherGivenName, this.FatherSurname, this.MotherGivenName, this.MotherSurname, this.LegalGuardianGivenName, this.LegalGuardianSurname, this.PresentAddressOutOfCountry, this.FirstReferenceNameandAddress, this.FirstReferenceMobileNumber, this.SecondReferenceNameandAddress, this.SecondReferenceMobileNumber, this.EmergencyNameAndAddress, this.EmergencyMobileNumber, this.AppliedButNotIssued, this.PreviousPassportNumber, this.OtherDetails1, this.OtherDetails2, this.OtherDetails3, this.OtherDetails4, this.OtherDetails5, this.OtherDetails6]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  Citizen.prototype.insertIntoDatabase = function(client, callback) {
    if (typeof client === "function") {
      callback = client;
      client = void 0;
    }
    if (client != null) {
      return this.insertQuery(client, null, callback);
    } else {
      return PGConnect((function(_this) {
        return function(err, client, done) {
          if (err) {
            if (typeof done === "function") {
              done(client);
            }
            if (typeof callback === "function") {
              callback(err);
            }
            return;
          }
          return _this.insertQuery(client, done, callback);
        };
      })(this));
    }
  };

  return Citizen;

})(user.User);

addCitizen = function(citizen, client, callback) {
  debug("Adding Cititzen " + citizen.email);
  return citizen.insertIntoDatabase(client, callback);
};

getForEmail = function(email, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "get_citizen_for_email",
      text: "SELECT * FROM " + EntityName + " WHERE \"email\" = $1::varchar",
      values: [email]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      if (result.rows[0]) {
        return typeof callback === "function" ? callback(null, new Citizen('db', result.rows[0])) : void 0;
      } else {
        return typeof callback === "function" ? callback(null, null) : void 0;
      }
    });
  });
};

isCitizen = function(email, callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "is_citizen",
      text: "SELECT count(*) AS exists FROM " + EntityName + " WHERE email = $1::varchar",
      values: [email]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows[0].exists === '1') : void 0;
    });
  });
};

attr_maps = {
  MaritalStatus: {
    's': 'Single',
    'm': 'Married',
    'd': 'Divorced',
    'w': 'Widow / Widower',
    'p': 'Seperated'
  },
  CitizenshipBy: {
    'b': 'Birth',
    'd': 'Descent',
    'r': 'Registration / Naturalization'
  },
  EmploymentType: {
    'a': 'Government',
    'b': 'Homemaker',
    'c': 'Not Employed',
    'd': 'Others',
    'e': 'Owners, Partners &amp; Directors of companies which are mambers of CII, FICCI &amp; ASSOCHAM',
    'f': 'Private',
    'g': 'PSU',
    'h': 'Retired - Government Servent',
    'i': 'Retired - Private Service',
    'j': 'Self Employed',
    'k': 'Statutory Body',
    'l': 'Student'
  },
  EducationalQualification: {
    'a': '5th pass or less',
    'b': 'Between 6th and 9th standard',
    'c': '10th pass and above',
    'd': 'Graduate and above'
  },
  HasAliases: {
    'y': 'Yes',
    'n': 'No'
  },
  HaveChangedName: {
    'y': 'Yes',
    'n': 'No'
  },
  Gender: {
    'm': 'Male',
    'f': 'Female'
  },
  PresentAddressOutOfCountry: {
    'y': 'Yes',
    'n': 'No'
  },
  AppliedButNotIssued: {
    'y': 'Yes',
    'n': 'No'
  },
  OtherDetails1: {
    'y': 'Yes',
    'n': 'No'
  },
  OtherDetails2: {
    'y': 'Yes',
    'n': 'No'
  },
  OtherDetails3: {
    'y': 'Yes',
    'n': 'No'
  },
  OtherDetails4: {
    'y': 'Yes',
    'n': 'No'
  },
  OtherDetails5: {
    'y': 'Yes',
    'n': 'No'
  },
  OtherDetails6: {
    'y': 'Yes',
    'n': 'No'
  }
};

attr_list = {};

for (attr in attr_maps) {
  map = attr_maps[attr];
  attr_list[attr] = [];
  for (key in map) {
    value = map[key];
    attr_list[attr].push({
      key: key,
      value: value
    });
  }
}

expandValueUsingMap = function(hash) {
  for (attr in attr_maps) {
    map = attr_maps[attr];
    hash[attr] = map[hash[attr]];
  }
  return hash;
};

filter = function(req, res, next) {
  debug("Citizen Auth Filter: " + req.url);
  if (!req.session.user) {
    return res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
  }
  return isCitizen(req.session.user.email, function(err, citizenValidity) {
    if (!citizenValidity) {
      if (req.session.user) {
        if (req.session.user.type === TYPE) {
          req.session.user = null;
          return res.redirect("/auth/signin");
        } else {
          return res.redirect("/dashboard");
        }
      } else {
        return res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
      }
    }
    return next();
  });
};

module.exports = {
  Citizen: Citizen,
  type: TYPE,
  EntityName: EntityName,
  attr_maps: attr_maps,
  attr_list: attr_list,
  expandValueUsingMap: expandValueUsingMap,
  filter: filter,
  isCitizen: isCitizen,
  addCitizen: addCitizen,
  getForEmail: getForEmail
};
