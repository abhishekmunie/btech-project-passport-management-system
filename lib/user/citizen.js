// Generated by CoffeeScript 1.7.1
var Citizen, EntityName, PGConnect, TYPE, globals, user,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

user = require('./user');

globals = require('../globals');

PGConnect = globals.PGConnect;

EntityName = '"passport"."Citizen"';

TYPE = 'Citizen';

Citizen = (function(_super) {
  var insertQuery;

  __extends(Citizen, _super);

  function Citizen(source, data) {
    var req, result;
    switch (source) {
      case 'db':
        result = data;
        this.email = result.rows[0].email;
        this.GivenName = result.rows[0].GivenName;
        this.Surname = result.rows[0].Surname;
        this.HasAliases = result.rows[0].HasAliases;
        this.HaveChangedName = result.rows[0].HaveChangedName;
        this.ContactNumber = result.rows[0].ContactNumber;
        this.DateOfBirth = result.rows[0].DateOfBirth;
        this.City = result.rows[0].City;
        this.Country = result.rows[0].Country;
        this.State = result.rows[0].State;
        this.District = result.rows[0].District;
        this.Gender = result.rows[0].Gender;
        this.MaritalStatus = result.rows[0].MaritalStatus;
        this.CitizenshipBy = result.rows[0].CitizenshipBy;
        this.PAN = result.rows[0].PAN;
        this.VoterID = result.rows[0].VoterID;
        this.EmploymentType = result.rows[0].EmploymentType;
        this.EducationalQualification = result.rows[0].EducationalQualification;
        this.AadhaarNumber = result.rows[0].AadhaarNumber;
        this.FatherGivenName = result.rows[0].FatherGivenName;
        this.FatherSurname = result.rows[0].FatherSurname;
        this.MotherGivenName = result.rows[0].MotherGivenName;
        this.MotherSurname = result.rows[0].MotherSurname;
        this.LegalGuardianGivenName = result.rows[0].LegalGuardianGivenName;
        this.LegalGuardianSurname = result.rows[0].LegalGuardianSurname;
        this.PresentAddressOutOfCountry = result.rows[0].PresentAddressOutOfCountry;
        this.FirstReferenceNameandAddress = result.rows[0].FirstReferenceNameandAddress;
        this.FirstReferenceMobileNumber = result.rows[0].FirstReferenceMobileNumber;
        this.SecondReferenceNameandAddress = result.rows[0].SecondReferenceNameandAddress;
        this.SecondReferenceMobileNumber = result.rows[0].SecondReferenceMobileNumber;
        this.EmergencyNameAndAddress = result.rows[0].EmergencyNameAndAddress;
        this.EmergencyMobileNumber = result.rows[0].EmergencyMobileNumber;
        this.AppliedButNotIssued = result.rows[0].AppliedButNotIssued;
        this.PreviousPassportNumber = result.rows[0].PreviousPassportNumber;
        this.OtherDetails1 = result.rows[0].OtherDetails1;
        this.OtherDetails2 = result.rows[0].OtherDetails2;
        this.OtherDetails3 = result.rows[0].OtherDetails3;
        this.OtherDetails4 = result.rows[0].OtherDetails4;
        this.OtherDetails5 = result.rows[0].OtherDetails5;
        this.OtherDetails6 = result.rows[0].OtherDetails6;
        break;
      case 'req':
        req = data;
        this.email = req.param('email');
        this.GivenName = req.param('GivenName');
        this.Surname = req.param('Surname');
        this.HasAliases = req.param('HasAliases');
        this.HaveChangedName = req.param('HaveChangedName');
        this.ContactNumber = req.param('ContactNumber');
        this.DateOfBirth = req.param('DateOfBirth');
        this.City = req.param('City');
        this.Country = req.param('Country');
        this.State = req.param('State');
        this.District = req.param('District');
        this.Gender = req.param('Gender');
        this.MaritalStatus = req.param('MaritalStatus');
        this.CitizenshipBy = req.param('CitizenshipBy');
        this.PAN = req.param('PAN');
        this.VoterID = req.param('VoterID');
        this.EmploymentType = req.param('EmploymentType');
        this.EducationalQualification = req.param('EducationalQualification');
        this.AadhaarNumber = req.param('AadhaarNumber');
        this.FatherGivenName = req.param('FatherGivenName');
        this.FatherSurname = req.param('FatherSurname');
        this.MotherGivenName = req.param('MotherGivenName');
        this.MotherSurname = req.param('MotherSurname');
        this.LegalGuardianGivenName = req.param('LegalGuardianGivenName');
        this.LegalGuardianSurname = req.param('LegalGuardianSurname');
        this.PresentAddressOutOfCountry = req.param('PresentAddressOutOfCountry');
        this.FirstReferenceNameandAddress = req.param('FirstReferenceNameandAddress');
        this.FirstReferenceMobileNumber = req.param('FirstReferenceMobileNumber');
        this.SecondReferenceNameandAddress = req.param('SecondReferenceNameandAddress');
        this.SecondReferenceMobileNumber = req.param('SecondReferenceMobileNumber');
        this.EmergencyNameAndAddress = req.param('EmergencyNameAndAddress');
        this.EmergencyMobileNumber = req.param('EmergencyMobileNumber');
        this.AppliedButNotIssued = req.param('AppliedButNotIssued');
        this.PreviousPassportNumber = req.param('PreviousPassportNumber');
        this.OtherDetails1 = req.param('OtherDetails1');
        this.OtherDetails2 = req.param('OtherDetails2');
        this.OtherDetails3 = req.param('OtherDetails3');
        this.OtherDetails4 = req.param('OtherDetails4');
        this.OtherDetails5 = req.param('OtherDetails5');
        this.OtherDetails6 = req.param('OtherDetails6');
    }
    this.name = this.GivenName + ' ' + this.Surname;
    this.type = TYPE;
  }

  insertQuery = function(client, done, callback) {
    return client.query({
      name: "citizen_insert",
      text: ("INSERT INTO " + EntityName + " VALUES ( ") + '$1::varchar , ' + '$2::varchar , ' + '$3::varchar , ' + '$4::char , ' + '$5::char , ' + '$6::int , ' + '$7::date , ' + '$8::varchar , ' + '$9::varchar , ' + '$10::varchar , ' + '$11::varchar , ' + '$12::char , ' + '$13::char , ' + '$14::char , ' + '$15::varchar , ' + '$16::varchar , ' + '$17::varchar , ' + '$18::varchar , ' + '$19::int , ' + '$20::varchar , ' + '$21::varchar , ' + '$22::varchar , ' + '$23::varchar , ' + '$24::varchar , ' + '$25::varchar , ' + '$26::char , ' + '$27::varchar , ' + '$28::int , ' + '$29::varchar , ' + '$30::int , ' + '$31::varchar , ' + '$32::int , ' + '$33::char , ' + '$34::int , ' + '$35::char , ' + '$36::char , ' + '$37::char , ' + '$38::char , ' + '$39::char , ' + '$40::char ' + " ) ",
      values: [this.email, this.GivenName, this.Surname, this.HasAliases, this.HaveChangedName, this.ContactNumber, this.DateOfBirth, this.City, this.Country, this.State, this.District, this.Gender, this.MaritalStatus, this.CitizenshipBy, this.PAN, this.VoterID, this.EmploymentType, this.EducationalQualification, this.AadhaarNumber, this.FatherGivenName, this.FatherSurname, this.MotherGivenName, this.MotherSurname, this.LegalGuardianGivenName, this.LegalGuardianSurname, this.PresentAddressOutOfCountry, this.FirstReferenceNameandAddress, this.FirstReferenceMobileNumber, this.SecondReferenceNameandAddress, this.SecondReferenceMobileNumber, this.EmergencyNameAndAddress, this.EmergencyMobileNumber, this.AppliedButNotIssued, this.PreviousPassportNumber, this.OtherDetails1, this.OtherDetails2, this.OtherDetails3, this.OtherDetails4, this.OtherDetails5, this.OtherDetails6]
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error running query', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  Citizen.prototype.insertIntoDatabase = function(client, callback) {
    if (typeof client === "function") {
      callback = client;
      client = void 0;
    }
    if (client != null) {
      return insertQuery(client, null, callback);
    } else {
      return PGConnect(function(err, client, done) {
        if (err) {
          if (typeof done === "function") {
            done(client);
          }
          console.error('error fetching client from pool', err);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        return insertQuery(client, done, callback);
      });
    }
  };

  return Citizen;

})(user.User);

module.exports = {
  Citizen: Citizen,
  type: TYPE,
  filter: function(req, res, next) {
    debug("Citizen Auth Filter: " + req.url);
    if (!((req.session.user != null) && req.session.user.type === TYPE)) {
      return res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
    }
    return next();
  },
  isCitizen: function(email, callback) {
    return PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error fetching client from pool', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return client.query({
        name: "is_citizen",
        text: "SELECT count(*) AS exists FROM " + EntityName + " WHERE email = $1::varchar",
        values: [email]
      }, function(err, result) {
        if (err) {
          if (typeof done === "function") {
            done(client);
          }
          console.error('error running query', err);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        if (typeof done === "function") {
          done();
        }
        return typeof callback === "function" ? callback(null, result.rows[0].exists === '1') : void 0;
      });
    });
  },
  getForEmail: function(email, callback) {
    return PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error fetching client from pool', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return client.query({
        name: "get_citizen_for_email",
        text: "SELECT * FROM " + EntityName + " WHERE email = $1::varchar",
        values: [email]
      }, function(err, result) {
        if (err) {
          if (typeof done === "function") {
            done(client);
          }
          console.error('error running query', err);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        if (typeof done === "function") {
          done();
        }
        if (result.rows[0]) {
          return typeof callback === "function" ? callback(null, new Citizen('db', result.rows[0])) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, null) : void 0;
        }
      });
    });
  }
};
