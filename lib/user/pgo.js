// Generated by CoffeeScript 1.7.1
var EntityName, PGConnect, PassportGrantingOfficer, TYPE, addPassportGrantingOfficer, crypto, debug, deletePassportGrantingOfficerFromDatabase, deleteQuery, filter, getPassportGrantingOfficers, globals, insertPassportGrantingOfficerIntoDatabase, insertQuery, removePassportGrantingOfficer, user,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

user = require('./user');

globals = require('../globals');

debug = globals.debug;

PGConnect = globals.PGConnect;

EntityName = '"passport"."PassportGrantingOfficer"';

TYPE = 'PassportGrantingOfficer';

PassportGrantingOfficer = (function(_super) {
  __extends(PassportGrantingOfficer, _super);

  function PassportGrantingOfficer(email, name) {
    this.email = email;
    this.name = name;
    this.type = TYPE;
  }

  return PassportGrantingOfficer;

})(user.User);

getPassportGrantingOfficers = function(callback) {
  return PGConnect(function(err, client, done) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      console.error('error fetching client from pool', err);
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    return client.query({
      name: "pgo_get_all",
      text: "SELECT * FROM " + EntityName + " ",
      values: []
    }, function(err, result) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error running query', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      if (typeof done === "function") {
        done();
      }
      return typeof callback === "function" ? callback(null, result.rows) : void 0;
    });
  });
};

insertQuery = function(values, client, done, callback) {
  return client.query({
    name: "pgo_insert",
    text: "INSERT INTO " + EntityName + " VALUES ( $1::varchar , $2::varchar ) ",
    values: values
  }, function(err, result) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      console.error('error running query', err);
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    if (typeof done === "function") {
      done();
    }
    return typeof callback === "function" ? callback(null, result.rows) : void 0;
  });
};

insertPassportGrantingOfficerIntoDatabase = function(email, Name, client, callback) {
  if (typeof client === "function") {
    callback = client;
    client = void 0;
  }
  if (client != null) {
    insertQuery([email, Name], client, null, callback);
  } else {
    PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error fetching client from pool', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      insertQuery([email, Name], client, done, callback);
    });
  }
};

addPassportGrantingOfficer = function(email, Name, client, callback) {
  var tempPassword;
  debug("Adding PGO with email: " + email);
  tempPassword = crypto.createHash('sha1').update(crypto.randomBytes(256)).digest('hex');
  return user.addUser(email, tempPassword, client, function(err) {
    return user.resetPasswordForUserWithEmail(email, function(err, res) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      console.log(res);
      return insertPassportGrantingOfficerIntoDatabase(email, Name, client, callback);
    });
  });
};

deleteQuery = function(values, client, done, callback) {
  return client.query({
    name: "pgo_delete",
    text: "DELETE FROM " + EntityName + " WHERE \"email\" = $1::varchar ",
    values: values
  }, function(err, result) {
    if (err) {
      if (typeof done === "function") {
        done(client);
      }
      console.error('error running query', err);
      if (typeof callback === "function") {
        callback(err);
      }
      return;
    }
    if (typeof done === "function") {
      done();
    }
    return typeof callback === "function" ? callback(null, result.rows) : void 0;
  });
};

deletePassportGrantingOfficerFromDatabase = function(email, client, callback) {
  if (typeof client === "function") {
    callback = client;
    client = void 0;
  }
  if (client != null) {
    deleteQuery([email], client, null, callback);
  } else {
    PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error fetching client from pool', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      deleteQuery([email], client, done, callback);
    });
  }
};

removePassportGrantingOfficer = function(email, client, callback) {
  debug("Removing PGO with email: " + email);
  return deletePassportGrantingOfficerFromDatabase(email, client, function(err) {
    return user.removeUser(email, client, callback);
  });
};

filter = function(req, res, next) {
  debug("Passport Granting Officer Auth Filter: " + req.url);
  if (!req.session.user) {
    return res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
  }
  return isPassportGrantingOfficer(req.session.user.email, function(err, pgoValidity) {
    if (!pgoValidity) {
      if (req.session.user) {
        res.redirect("/auth/signin");
      } else {
        res.redirect("/auth/signin?redirect=" + (encodeURIComponent(req.url)));
      }
    }
    return next();
  });
};

module.exports = {
  PassportGrantingOfficer: PassportGrantingOfficer,
  type: TYPE,
  filter: filter,
  getPassportGrantingOfficers: getPassportGrantingOfficers,
  addPassportGrantingOfficer: addPassportGrantingOfficer,
  removePassportGrantingOfficer: removePassportGrantingOfficer,
  isPassportGrantingOfficer: function(email, callback) {
    return PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error fetching client from pool', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return client.query({
        name: "is_passport_granting_officer",
        text: "SELECT count(*) AS exists FROM " + EntityName + " WHERE email = $1::varchar",
        values: [email]
      }, function(err, result) {
        if (err) {
          if (typeof done === "function") {
            done(client);
          }
          console.error('error running query', err);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        if (typeof done === "function") {
          done();
        }
        return typeof callback === "function" ? callback(null, result.rows[0].exists === '1') : void 0;
      });
    });
  },
  getForEmail: function(email, callback) {
    return PGConnect(function(err, client, done) {
      if (err) {
        if (typeof done === "function") {
          done(client);
        }
        console.error('error fetching client from pool', err);
        if (typeof callback === "function") {
          callback(err);
        }
        return;
      }
      return client.query({
        name: "get_passport_granting_officer_for_email",
        text: "SELECT * FROM " + EntityName + " WHERE email = $1::varchar",
        values: [email]
      }, function(err, result) {
        if (err) {
          if (typeof done === "function") {
            done(client);
          }
          console.error('error running query', err);
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        }
        if (typeof done === "function") {
          done();
        }
        if (result.rows[0]) {
          return typeof callback === "function" ? callback(null, new PassportGrantingOfficer(result.rows[0].email, result.rows[0].Name)) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, null) : void 0;
        }
      });
    });
  }
};
