// Generated by CoffeeScript 1.7.1
var Admin, PGConnect, TYPE, config, debug, globals, settings, user,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

user = require('./user');

globals = require('../globals');

debug = globals.debug;

config = globals.config;

PGConnect = globals.PGConnect;

settings = require('../settings');

TYPE = 'Admin';

Admin = (function(_super) {
  __extends(Admin, _super);

  function Admin(email, name) {
    this.email = email;
    this.name = name;
    this.type = TYPE;
  }

  return Admin;

})(user.User);

module.exports = {
  Admin: Admin,
  type: TYPE,
  filter: function(req, res, next) {
    debug("Admin Auth Filter: " + req.url);
    if (!((req.session.user != null) && req.session.user.type === TYPE)) {
      req.url = "/auth/signin/admin";
    }
    return next();
  },
  verifyCredentials: function(email, password, callback) {
    if (email === config.admin.email) {
      return settings.get('admin_pass', function(err, validPassword) {
        return typeof callback === "function" ? callback(null, password === validPassword) : void 0;
      });
    } else {
      return process.nextTick(function() {
        return typeof callback === "function" ? callback(null, false) : void 0;
      });
    }
  },
  isAdmin: function(email, callback) {
    return process.nextTick(function() {
      return typeof callback === "function" ? callback(null, email === config.admin.email) : void 0;
    });
  },
  getForEmail: function(email, callback) {
    if (email === config.admin.email) {
      return process.nextTick(function() {
        return typeof callback === "function" ? callback(null, new Admin(config.admin.email, config.admin.name)) : void 0;
      });
    } else {
      return process.nextTick(function() {
        return typeof callback === "function" ? callback(null, null) : void 0;
      });
    }
  }
};
