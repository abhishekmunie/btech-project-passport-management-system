// Generated by CoffeeScript 1.7.1
var app, bodyParser, cachelicious, cacheliciousConnect, config, connectPGSimple, cookieParser, crypto, debug, ejs, express, favicon, fs, globals, hogan, http, logger, path, pg, pgSession, resolve, serveStatic, server, session, staticCache, template, url, util, zlib;

fs = require('fs');

url = require('url');

path = require('path');

http = require('http');

zlib = require('zlib');

util = require('util');

crypto = require('crypto');

express = require('express');

session = require('express-session');

favicon = require('static-favicon');

logger = require('morgan');

cookieParser = require('cookie-parser');

bodyParser = require('body-parser');

serveStatic = require('serve-static');

resolve = require('resolve-path');

pg = require('pg');

connectPGSimple = require('connect-pg-simple');

hogan = require('hogan.js');

ejs = require('ejs');

cachelicious = require('cachelicious');

template = require('./template');

cacheliciousConnect = cachelicious.connect;

globals = require('./globals');

config = globals.config;

debug = globals.debug;

app = express();

app.set('env', config.env);

app.set('ip', config.ip);

app.set('port', config.port);

staticCache = serveStatic(config.static_file.source);

app.use(favicon(path.join('static', 'favicon.ico')));

if (app.get('env') === 'development') {
  app.use(logger({
    immediate: true,
    format: 'dev'
  }));
}

if (config.trust_proxy) {
  app.enable('trust proxy');
}

app.use(cookieParser(config.cookie_secret));

if (config.force_https.enable === true) {
  app.use(function(req, res, next) {
    var _ref;
    if (!(req.secure || req.headers['x-forwarded-proto'] === 'https')) {
      return res.redirect(301, "https://" + (config.force_https.host || req.headers.host) + req.url);
    }
    res.set({
      'Strict-Transport-Security': "max-age=" + config.force_https.maxAge + ((_ref = config.force_https.includeSubdomains) != null ? _ref : {
        "; includeSubDomains": ""
      })
    });
    res.removeHeader('X-Powered-By');
    next();
  });
}

app.use(bodyParser.json());

app.use(bodyParser.urlencoded());

pgSession = connectPGSimple({
  session: session
});

config.session.config.store = new pgSession({
  pg: pg,
  conString: config.pg_url
});

app.use(session(config.session.config));

app.use(function(req, res, next) {
  debug("Cachelicious Handler: " + req.url);
  if (req.url[1] === '_' || /^\/(.*\/_.*|node_modules\/.*|package.json|Procfile|vendor\/.*)$/.test(req.url)) {
    return next();
  }
  return staticCache.apply(this, arguments);
});

app.use('/', require('./routes/root'));

app.use('/auth', require('./routes/auth'));

app.use('/admin', require('./routes/admin'));

app.use('/pgo', require('./routes/pgo'));

app.use('/va', require('./routes/va'));

app.use('/user', require('./routes/user'));

app.use('/citizen-registration', require('./routes/citizen-registration'));

app.all(/.*\/[^\.\/]*$/, function(req, res, next) {
  var query, urlPath, _ref;
  debug("/ Handler: " + req.url);
  _ref = req.url.split('?'), urlPath = _ref[0], query = _ref[1];
  req.url = "" + (path.join(urlPath, "" + config.index + ".html")) + (query ? "?" + query : "");
  next();
});

app.all(/\.(html|htm|xml|xhtml|xht)$/, function(req, res, next) {
  debug("Hogan Handler: " + req.url);
  template.sendHogan(req, res, function(err) {
    if (err) {
      req.url = req.url.replace(new RegExp("\\/" + config.index + ".html"), "/" + config.index + ".ejs");
      return next();
    }
  });
});

app.all(/\.ejs$/, function(req, res, next) {
  debug("EJS Handler: " + req.url);
  template.sendEJS(req, res, function(err) {
    if (err) {
      req.url = req.url.replace(new RegExp("\\/" + config.index + ".ejs"), "/");
      return next();
    }
  });
});

app.use(function(req, res, next) {
  var err;
  debug("404 Error Handler: " + req.url);
  err = new Error('File Not Found');
  err.status = 404;
  return next(err);
});

app.use(function(err, req, res, next) {
  debug("Error Log Handler: " + req.url);
  console.error(err.stack);
  next(err);
});

if (app.get('env') === 'production') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    if (req.xhr) {
      res.send({
        error: err.status === 404 ? '404 Not Found' : 'Something blew up!'
      });
    } else {
      req.url = "/error/" + (err.status || 500) + ".html";
      return staticCache.apply(this, [req, res, next]);
    }
  });
  app.use(function(err, req, res, next) {
    return res.send('Something blew up!');
  });
} else {
  app.use(function(err, req, res, next) {
    debug("x Error Handler: " + req.url);
    res.status(err.status || 500);
    if (req.xhr) {
      res.send({
        message: err.message,
        error: err
      });
    } else {
      req.url = "/error/" + (err.status || 500) + ".html";
      return staticCache.apply(this, [req, res, next]);
    }
  });
  app.use(function(req, res, next) {
    return res.send('Something blew up!');
  });
}

console.time('Server Startup');

if (app.get('ip')) {
  server = http.createServer(app).listen(app.get('port'), app.get('ip'), function() {
    var address;
    console.timeEnd('Server Startup');
    address = server.address();
    if (app.get('env') === 'development') {
      console.log("Listening on port " + address.port + "...");
    }
  });
} else {
  server = http.createServer(app).listen(app.get('port'), function() {
    var address;
    console.timeEnd('Server Startup');
    address = server.address();
    if (app.get('env') === 'development') {
      console.log("Listening on port " + address.port + "...");
    }
  });
}
